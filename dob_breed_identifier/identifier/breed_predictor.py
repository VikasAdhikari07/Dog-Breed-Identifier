import tensorflow as tf
import os
from django.conf import settings
import numpy as np
from tensorflow.keras.models import load_model # type: ignore
from tensorflow.keras.preprocessing import image # type: ignore

model = load_model(os.path.join(settings.BASE_DIR, "model_efficientnet.keras"))
breed = [
    'Chihuahua',
    'Japanese Spaniel',
    'Maltese Dog',
    'Pekinese',
    'Shih',
    'Blenheim Spaniel',
    'Papillon',
    'Toy Terrier',
    'Rhodesian Ridgeback',
    'Afghan Hound',
    'Basset',
    'Beagle',
    'Bloodhound',
    'Bluetick',
    'Black',
    'Walker Hound',
    'English Foxhound',
    'Redbone',
    'Borzoi',
    'Irish Wolfhound',
    'Italian Greyhound',
    'Whippet',
    'Ibizan Hound',
    'Norwegian Elkhound',
    'Otterhound',
    'Saluki',
    'Scottish Deerhound',
    'Weimaraner',
    'Staffordshire Bullterrier',
    'American Staffordshire Terrier',
    'Bedlington Terrier',
    'Border Terrier',
    'Kerry Blue Terrier',
    'Irish Terrier',
    'Norfolk Terrier',
    'Norwich Terrier',
    'Yorkshire Terrier',
    'Wire',
    'Lakeland Terrier',
    'Sealyham Terrier',
    'Airedale',
    'Cairn',
    'Australian Terrier',
    'Dandie Dinmont',
    'Boston Bull',
    'Miniature Schnauzer',
    'Giant Schnauzer',
    'Standard Schnauzer',
    'Scotch Terrier',
    'Tibetan Terrier',
    'Silky Terrier',
    'Soft',
    'West Highland White Terrier',
    'Lhasa',
    'Flat',
    'Curly',
    'Golden Retriever',
    'Labrador Retriever',
    'Chesapeake Bay Retriever',
    'German Short',
    'Vizsla',
    'English Setter',
    'Irish Setter',
    'Gordon Setter',
    'Brittany Spaniel',
    'Clumber',
    'English Springer',
    'Welsh Springer Spaniel',
    'Cocker Spaniel',
    'Sussex Spaniel',
    'Irish Water Spaniel',
    'Kuvasz',
    'Schipperke',
    'Groenendael',
    'Malinois',
    'Briard',
    'Kelpie',
    'Komondor',
    'Old English Sheepdog',
    'Shetland Sheepdog',
    'Collie',
    'Border Collie',
    'Bouvier Des Flandres',
    'Rottweiler',
    'German Shepherd',
    'Doberman',
    'Miniature Pinscher',
    'Greater Swiss Mountain Dog',
    'Bernese Mountain Dog',
    'Appenzeller',
    'Entlebucher',
    'Boxer',
    'Bull Mastiff',
    'Tibetan Mastiff',
    'French Bulldog',
    'Great Dane',
    'Saint Bernard',
    'Eskimo Dog',
    'Malamute',
    'Siberian Husky',
    'Affenpinscher',
    'Basenji',
    'Pug',
    'Leonberg',
    'Newfoundland',
    'Great Pyrenees',
    'Samoyed',
    'Pomeranian',
    'Chow',
    'Keeshond',
    'Brabancon Griffon',
    'Pembroke',
    'Cardigan',
    'Toy Poodle',
    'Miniature Poodle',
    'Standard Poodle',
    'Mexican Hairless',
    'Dingo',
    'Dhole',
    'African Hunting Dog'
]

def predict(path):
    # img = image.load_img("C:\\Users\\user\\Downloads\\dogyy.jpg" ,target_size=(224, 224,3))  # Resize to model's input size
    
    img = image.load_img(path ,target_size=(224, 224,3))  # Resize to model's input size
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Expand to batch dimension
    predictions = model.predict(img_array)[0]
    top_indices = np.argsort(predictions)[-3:][::-1]  # Get top 3 highest probability indices

    top_breeds = [
        {"name": breed[i], "probability": ("%.2f" % (float(100)*float(predictions[i])))} for i in top_indices
    ]

    return top_breeds